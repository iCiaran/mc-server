// Code generated by gen --type=Intention --id=0x01; DO NOT EDIT.

package packets

import (
	"io"
)

func DeserializeIntention(reader io.Reader) (Intention, int, error) {

	fieldProtocolVersion, _, err := DeserializeVarInt(reader)
	if err != nil {
		return Intention{}, 0, err
	}

	fieldServerAddress, _, err := DeserializeString(reader)
	if err != nil {
		return Intention{}, 0, err
	}

	fieldServerPort, _, err := DeserializeUnsignedShort(reader)
	if err != nil {
		return Intention{}, 0, err
	}

	fieldIntent, _, err := DeserializeVarInt(reader)
	if err != nil {
		return Intention{}, 0, err
	}

	return Intention{
		ProtocolVersion: fieldProtocolVersion,

		ServerAddress: fieldServerAddress,

		ServerPort: fieldServerPort,

		Intent: fieldIntent,
	}, 0, nil
}

func (p Intention) Serialize() ([]byte, error) {
	buffer := make([]byte, 0)

	packetIdBytes, err := VarInt(1).Serialize()
	if err != nil {
		return nil, err
	}

	dataBuffer := make([]byte, 0)

	fieldProtocolVersion, err := p.ProtocolVersion.Serialize()
	if err != nil {
		return nil, err
	}
	dataBuffer = append(dataBuffer, fieldProtocolVersion...)

	fieldServerAddress, err := p.ServerAddress.Serialize()
	if err != nil {
		return nil, err
	}
	dataBuffer = append(dataBuffer, fieldServerAddress...)

	fieldServerPort, err := p.ServerPort.Serialize()
	if err != nil {
		return nil, err
	}
	dataBuffer = append(dataBuffer, fieldServerPort...)

	fieldIntent, err := p.Intent.Serialize()
	if err != nil {
		return nil, err
	}
	dataBuffer = append(dataBuffer, fieldIntent...)

	serializedLength, err := VarInt(len(packetIdBytes) + len(dataBuffer)).Serialize()
	if err != nil {
		return nil, err
	}

	buffer = append(buffer, serializedLength...)
	buffer = append(buffer, packetIdBytes...)
	buffer = append(buffer, dataBuffer...)

	return buffer, nil
}
