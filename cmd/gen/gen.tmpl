{{- /*gotype: github.com/iCiaran/mc-server/cmd/gen.PacketInfo*/ -}}
// Code generated by gen {{ .CommandArgs }}; DO NOT EDIT.

package packets

import (
	{{- if .HasJson }}
	"encoding/json"
	{{ end -}}
  "io"
)

func Deserialize{{ .PacketType }}(reader io.Reader) ({{ .PacketType }}, int, error) {

	{{ $packetType := .PacketType }}
	{{ range $element := .Fields }}
	  {{ if $element.IsJson }}
	    field{{ $element.Name }}String, _, err := DeserializeString(reader)
		  if err != nil {
			  return {{ $packetType }}{}, 0, err
      }

	    var field{{ $element.Name }} {{ $element.Type }}
      err = json.Unmarshal([]byte(field{{ $element.Name }}String), &field{{ $element.Name }})
	    if err != nil {
			  return {{ $packetType }}{}, 0, err
      }

	  {{ else }}
      field{{ $element.Name }}, _, err := Deserialize{{ $element.Type }}(reader)
      if err != nil {
        return {{ $packetType }}{}, 0, err
      }

	  {{ end }}
	{{ end }}

  return {{ .PacketType }}{
	  {{- range $element := .Fields }}
	    {{ $element.Name }}: field{{ $element.Name }},
	  {{ end }}
  }, 0, nil
}

func (p {{ .PacketType }}) Serialize() ([]byte, error) {
	buffer := make([]byte, 0)

  packetIdBytes, err := VarInt({{ .PacketId }}).Serialize()
  if err != nil {
	  return nil, err
  }

  dataBuffer := make([]byte, 0)

  {{ range $element := .Fields }}
    {{ if $element.IsJson }}
      field{{ $element.Name }}, err := json.Marshal(p.{{ $element.Name }})
      if err != nil {
        return nil, err
      }

      field{{ $element.Name }}Length, err := VarInt(len(field{{ $element.Name }})).Serialize()
      if err != nil {
        return nil, err
      }

      dataBuffer = append(dataBuffer, field{{ $element.Name }}Length...)
      dataBuffer = append(dataBuffer, field{{ $element.Name }}...)

    {{ else }}
      field{{ $element.Name }}, err := p.{{ $element.Name }}.Serialize()
      if err != nil {
        return nil, err
      }
      dataBuffer = append(dataBuffer, field{{ $element.Name }}...)

    {{ end }}
  {{ end }}

  serializedLength, err := VarInt(len(packetIdBytes) + len(dataBuffer)).Serialize()
  if err != nil {
	  return nil, err
  }

  buffer = append(buffer, serializedLength...)
  buffer = append(buffer, packetIdBytes...)
  buffer = append(buffer, dataBuffer...)

	return buffer, nil
}